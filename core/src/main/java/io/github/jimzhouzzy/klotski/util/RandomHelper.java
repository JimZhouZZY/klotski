/*
 * Copyright (C) 2025 Zhiyu Zhou (jimzhouzzy@gmail.com)
 * This file is part of github.com/jimzhouzzy/Klotski.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * RandomHelper.java
 * 
 * This class provides utility methods for generating random numbers.
 * 
 * It should NOT be used for seeded games, as it does not provide a
 * deterministic sequence of random numbers.
 * 
 * It should only be initialized once, in {@link Klotski} and used multiple times.
 * 
 * @author JimZhouZZY
 * @version 1.5
 * @since 2025-5-25
 * 
 * Change log:
 * 2025-05-27: Generated comment
 * 2025-05-26: Update changelog
 * 2025-05-26: add comment
 * 2025-05-26: Copyright Header
 * 2025-05-25: refactor util code to ColorHelper and RandomHelper
 */

package io.github.jimzhouzzy.klotski.util;

import java.util.Random;

public class RandomHelper {
    Random random;

    public RandomHelper() {
        this.random = new Random();
    }

    /**
     * Returns a pseudorandom {@code int} value. The value is uniformly
     * distributed between {@link Integer#MIN_VALUE} (inclusive) and
     * {@link Integer#MAX_VALUE} (inclusive). This method delegates the
     * generation to the underlying {@link Random} instance's {@code nextInt()}
     * method, producing the next value in its pseudorandom sequence.
     *
     * @return a pseudorandom {@code int} value spanning the full range of
     * possible32-bit integer values
     */
    public int nextInt() {
            return random.nextInt();
        }

    /**
     * Generates a pseudorandom integer between0 (inclusive) and the specified bound (exclusive).
     * This method delegates the call to the underlying {@link Random} instance's {@code nextInt(int)} method.
     *
     * @param bound the upper bound (exclusive) for the generated random integer. Must be a positive value.
     * @return a pseudorandom integer in the range {@code [0, bound)}, where {@code bound} is the provided parameter.
     * @throws IllegalArgumentException if the specified bound is not positive.
     */
    public int nextInt(int bound) {
            return random.nextInt(bound);
        }

    /**
     * Returns a pseudorandom {@code float} value between0.0 (inclusive) and1.0 (exclusive)
     * generated by the internal {@code Random} instance. This method delegates to
     * {@link java.util.Random#nextFloat()} of the underlying random number generator, producing
     * a uniformly distributed value within the specified range. Subsequent calls return new
     * pseudorandom values based on the generator's sequence.
     *
     * @return a pseudorandom {@code float} value in the range [0.0,1.0).
     */
    public float nextFloat() {
            return random.nextFloat();
        }

    /**
     * Returns a pseudorandom float value between0.0 (inclusive) and the specified bound (exclusive)
     * if the bound is positive, or between the bound (inclusive) and0.0 (exclusive) if the bound is
     * negative. The value is generated by multiplying the underlying random number generator's
     * {@code nextFloat()} result by the provided bound.
     *
     * @param bound the upper or lower exclusive bound determining the range of the generated value
     * @return a pseudorandom float value within the calculated range
     */
    public float nextFloat(float bound) {
            return random.nextFloat() * bound;
        }
}
